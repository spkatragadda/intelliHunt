#!/usr/bin/env python3
"""
Test script for the vulnerability fetcher functionality.
This script tests the CVE fetcher and vulnerability processor.
"""

import sys
import json
from pathlib import Path
from cve_fetcher import CVEFetcher
from vulnerability_processor import VulnerabilityProcessor

def test_cve_fetcher():
    """Test the CVE fetcher functionality."""
    print("Testing CVE Fetcher...")
    
    try:
        # Initialize CVE fetcher
        fetcher = CVEFetcher()
        
        # Test fetching recent CVEs by date
        print("Fetching recent CVEs from the past 7 days...")
        recent_cves = fetcher.get_recent_cves_by_date(days_back=7)
        
        print(f"Found {len(recent_cves)} recent CVEs")
        
        # Show first few CVEs
        for i, cve_record in enumerate(recent_cves[:3]):
            cve = cve_record.get('cve', {})
            cve_id = cve.get('id', 'Unknown')
            descriptions = cve.get('descriptions', [])
            description = ''
            for desc in descriptions:
                if desc.get('lang') == 'en':
                    description = desc.get('value', '')[:100]
                    break
            
            print(f"  {i+1}. {cve_id}: {description}...")
        
        return True
        
    except Exception as e:
        print(f"Error testing CVE fetcher: {e}")
        return False

def test_vulnerability_processor():
    """Test the vulnerability processor functionality."""
    print("\nTesting Vulnerability Processor...")
    
    try:
        # Initialize vulnerability processor
        processor = VulnerabilityProcessor(days_back=7)
        
        # Generate enhanced crew input
        print("Generating enhanced crew input with vulnerability data...")
        enhanced_input = processor.generate_crew_input_with_vulnerabilities()
        
        print(f"Enhanced input generated with:")
        print(f"  - Software stack: {enhanced_input.get('software_stack', 'Unknown')}")
        print(f"  - Total CVEs: {enhanced_input.get('vulnerability_data', {}).get('total_cves_found', 0)}")
        print(f"  - High priority CVEs: {len(enhanced_input.get('vulnerability_data', {}).get('high_priority_cves', []))}")
        print(f"  - Research focus: {enhanced_input.get('research_focus', 'Unknown')}")
        
        # Save enhanced input
        output_path = processor.save_enhanced_crew_input()
        print(f"Enhanced crew input saved to: {output_path}")
        
        # Generate vulnerability summary
        summary_path = processor.save_vulnerability_summary()
        print(f"Vulnerability summary saved to: {summary_path}")
        
        return True
        
    except Exception as e:
        print(f"Error testing vulnerability processor: {e}")
        return False

def test_cpe_integration():
    """Test integration with existing CPE data."""
    print("\nTesting CPE Integration...")
    
    try:
        # Check if CPE data exists
        crew_dir = Path(__file__).parent
        cpe_files = list(crew_dir.glob("cpe_data_*.json"))
        
        if not cpe_files:
            print("No CPE data files found. Please run the NVD CPE client first.")
            return False
        
        # Use the most recent CPE file
        latest_cpe_file = max(cpe_files, key=lambda x: x.stat().st_mtime)
        print(f"Using CPE data from: {latest_cpe_file}")
        
        # Initialize vulnerability processor with CPE data
        processor = VulnerabilityProcessor(str(latest_cpe_file), days_back=7)
        
        # Test CPE name extraction
        with open(latest_cpe_file, 'r') as f:
            cpe_data = json.load(f)
        
        fetcher = CVEFetcher()
        cpe_names = fetcher.extract_cpe_names_from_data(cpe_data)
        print(f"Extracted {len(cpe_names)} unique CPE names")
        
        # Show first few CPE names
        for i, cpe_name in enumerate(cpe_names[:5]):
            print(f"  {i+1}. {cpe_name}")
        
        return True
        
    except Exception as e:
        print(f"Error testing CPE integration: {e}")
        return False

def main():
    """Main test function."""
    print("IntelliHunt Vulnerability Fetcher Test Suite")
    print("=" * 50)
    
    tests = [
        ("CVE Fetcher", test_cve_fetcher),
        ("Vulnerability Processor", test_vulnerability_processor),
        ("CPE Integration", test_cpe_integration)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name} test PASSED")
            else:
                print(f"‚ùå {test_name} test FAILED")
        except Exception as e:
            print(f"‚ùå {test_name} test FAILED with exception: {e}")
            results.append((test_name, False))
    
    # Summary
    print(f"\n{'='*50}")
    print("TEST SUMMARY")
    print(f"{'='*50}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "PASSED" if result else "FAILED"
        print(f"{test_name}: {status}")
    
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! The vulnerability fetcher is ready to use.")
        return 0
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the errors above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
