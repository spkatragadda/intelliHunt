#!/usr/bin/env python3
"""
Simple test script for the vulnerability fetcher functionality.
This script tests with a limited number of CPEs to avoid API rate limits.
"""

import sys
import json
from pathlib import Path
from cve_fetcher import CVEFetcher

def test_simple_cve_fetch():
    """Test CVE fetching with a simple approach."""
    print("Simple Vulnerability Fetcher Test")
    print("=" * 40)
    
    try:
        # Initialize CVE fetcher
        fetcher = CVEFetcher()
        
        # Test 1: Fetch recent CVEs by date (this is fast and doesn't hit rate limits)
        print("1. Testing recent CVE fetch by date...")
        recent_cves = fetcher.get_recent_cves_by_date(days_back=7)
        print(f"   Found {len(recent_cves)} recent CVEs")
        
        # Show first few CVEs
        for i, cve_record in enumerate(recent_cves[:3]):
            cve = cve_record.get('cve', {})
            cve_id = cve.get('id', 'Unknown')
            descriptions = cve.get('descriptions', [])
            description = ''
            for desc in descriptions:
                if desc.get('lang') == 'en':
                    description = desc.get('value', '')[:100]
                    break
            
            print(f"   {i+1}. {cve_id}: {description}...")
        
        # Test 2: Test with a few specific CPEs
        print("\n2. Testing CVE fetch for specific CPEs...")
        test_cpes = [
            "cpe:2.3:a:microsoft:office:2021:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:http_server:2.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:oracle:java:8:*:*:*:*:*:*:*"
        ]
        
        cve_data = fetcher.get_cves_for_cpe_list(test_cpes, days_back=7, max_cpes=3)
        
        total_cves = 0
        for cpe_name, cves in cve_data.items():
            print(f"   {cpe_name}: {len(cves)} CVEs")
            total_cves += len(cves)
            
            # Show first CVE if any
            if cves:
                cve_record = cves[0]
                cve = cve_record.get('cve', {})
                cve_id = cve.get('id', 'Unknown')
                print(f"     Example: {cve_id}")
        
        print(f"\n   Total CVEs found for test CPEs: {total_cves}")
        
        # Test 3: Generate research agent input
        print("\n3. Testing research agent input generation...")
        if total_cves > 0:
            # Create mock vulnerability data
            mock_vulnerability_data = {
                'organization': {'name': 'Test Organization'},
                'collection_timestamp': '2025-09-09T02:00:00.000Z',
                'search_period_days': 7,
                'cpe_vulnerabilities': cve_data,
                'summary': {
                    'total_cpes_searched': len(test_cpes),
                    'total_cves_found': total_cves,
                    'cpes_with_vulnerabilities': len([cpe for cpe, cves in cve_data.items() if cves]),
                    'cpe_names': test_cpes
                }
            }
            
            research_input = fetcher.generate_research_agent_input(mock_vulnerability_data)
            
            print(f"   Research input generated:")
            print(f"   - Total CVEs: {research_input['total_cves']}")
            print(f"   - High priority CVEs: {len(research_input['high_priority_cves'])}")
            print(f"   - Research focus: {research_input['vulnerability_focus']}")
            
            # Save test output
            output_path = Path(__file__).parent / "test_vulnerability_output.json"
            with open(output_path, 'w') as f:
                json.dump(research_input, f, indent=2)
            print(f"   Test output saved to: {output_path}")
        
        print(f"\n✅ Simple vulnerability test completed successfully!")
        return True
        
    except Exception as e:
        print(f"❌ Error in simple vulnerability test: {e}")
        return False

def main():
    """Main test function."""
    success = test_simple_cve_fetch()
    
    if success:
        print(f"\n🎉 Simple vulnerability test passed!")
        print(f"   The vulnerability fetcher is working correctly.")
        print(f"   For production use, the system will process more CPEs")
        print(f"   but with appropriate rate limiting to respect the NVD API.")
        return 0
    else:
        print(f"\n⚠️  Simple vulnerability test failed.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
