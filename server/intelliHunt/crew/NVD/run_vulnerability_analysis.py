#!/usr/bin/env python3
"""
Run Vulnerability Analysis Script
This script demonstrates how to use the vulnerability fetcher to get recent CVEs
and provide them to the research agent.
"""

import sys
import json
from pathlib import Path
from vulnerability_processor import VulnerabilityProcessor

def main():
    """Main function to run vulnerability analysis."""
    print("IntelliHunt Vulnerability Analysis")
    print("=" * 40)
    
    try:
        # Initialize vulnerability processor
        print("Initializing vulnerability processor...")
        processor = VulnerabilityProcessor(days_back=7)  # Last 7 days
        
        # Generate enhanced crew input with vulnerability data
        print("Fetching recent vulnerabilities and generating crew input...")
        enhanced_input = processor.generate_crew_input_with_vulnerabilities()
        
        # Display summary
        vuln_data = enhanced_input.get('vulnerability_data', {})
        print(f"\nVulnerability Analysis Summary:")
        print(f"  - Total CVEs Found: {vuln_data.get('total_cves_found', 0)}")
        print(f"  - High Priority CVEs: {len(vuln_data.get('high_priority_cves', []))}")
        print(f"  - Time Period: {vuln_data.get('time_period', 'Unknown')}")
        print(f"  - Research Focus: {enhanced_input.get('research_focus', 'Unknown')}")
        
        # Show high priority CVEs
        high_priority_cves = vuln_data.get('high_priority_cves', [])
        if high_priority_cves:
            print(f"\nHigh Priority CVEs (showing first 5):")
            for i, cve in enumerate(high_priority_cves[:5]):
                print(f"  {i+1}. {cve.get('cve_id', 'Unknown')} - {cve.get('severity', 'Unknown')}")
                print(f"     {cve.get('description', 'No description')[:100]}...")
                print(f"     CPE: {cve.get('cpe_name', 'Unknown')}")
                print()
        
        # Save enhanced crew input
        print("Saving enhanced crew input...")
        input_path = processor.save_enhanced_crew_input()
        print(f"Enhanced crew input saved to: {input_path}")
        
        # Save vulnerability summary
        print("Generating vulnerability summary...")
        summary_path = processor.save_vulnerability_summary()
        print(f"Vulnerability summary saved to: {summary_path}")
        
        # Display the structure of data that will be passed to research agent
        print(f"\nData Structure for Research Agent:")
        print(f"  - Software Stack: {enhanced_input.get('software_stack', 'Unknown')}")
        print(f"  - URL List: {len(enhanced_input.get('url_list', []))} URLs")
        print(f"  - CVE List: {len(vuln_data.get('recent_cves', []))} CVEs")
        print(f"  - CVE Details: {len(vuln_data.get('cve_details', []))} detailed records")
        print(f"  - High Priority CVEs: {len(high_priority_cves)} critical/high severity")
        
        print(f"\n✅ Vulnerability analysis complete!")
        print(f"   The research agent will now receive recent CVE data instead of just CPE data.")
        print(f"   This provides more targeted and actionable threat intelligence.")
        
        return 0
        
    except Exception as e:
        print(f"❌ Error running vulnerability analysis: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
